datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Service {
  id                         String            @id @default(uuid())
  eventPlannerId             String            @unique
  title                      String            @db.VarChar(255)
  description                String            @db.LongText
  price                      Float
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  EventPlannerShop           EventPlannerShop? @relation(fields: [eventPlannerEventPlannerId], references: [eventPlannerId])
  eventPlannerEventPlannerId String?

  @@index([eventPlannerEventPlannerId])
}

model UserAccount {
  id         String   @id @default(uuid())
  userId     String   @unique
  email      String?  @unique
  firstName  String
  middleName String?
  lastName   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// A user can have one Event Planner profile, and each Event Planner profile can have multiple Services (Service table). - One to Many relationship

// Each Event Planner profile can have multiple Pricing Packages (PricingPackage table), also multiple Availability entries (Availability table) and multiple Services Offered (Service table) - One to Many relationship 
model EventPlannerShop {
  eventPlannerId  String           @id @default(uuid())
  userId          String           @unique
  businessName    String
  profilePicture  String
  bio             String           @db.LongText
  servicesOffered Service[]
  pricing         PricingPackage[]
  averageRating   Float
  availability    Availability[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model PricingPackage {
  id                         String            @id @default(uuid())
  eventPlannerId             String            @unique
  packageName                String            @db.VarChar(255)
  packageDescription         String            @db.LongText
  price                      Float
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  EventPlannerShop           EventPlannerShop? @relation(fields: [eventPlannerEventPlannerId], references: [eventPlannerId])
  eventPlannerEventPlannerId String?

  @@index([eventPlannerEventPlannerId])
}

model Availability {
  id                         String            @id @default(uuid())
  eventPlannerId             String            @unique
  dayOfWeek                  String            @db.VarChar(255)
  startTime                  DateTime
  endTime                    DateTime
  createdAt                  DateTime          @default(now())
  updatedAt                  DateTime          @updatedAt
  EventPlannerShop           EventPlannerShop? @relation(fields: [eventPlannerEventPlannerId], references: [eventPlannerId])
  eventPlannerEventPlannerId String?

  @@index([eventPlannerEventPlannerId])
}
